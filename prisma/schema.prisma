// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  employeeNumber String   @id
  firstName      String
  lastName       String
  secondLastName String
  rfc            String   @unique
  email          String   @unique
  phoneNumber    String?

  session        Session?
  ventas         Venta[]   // Relación inversa con Venta
  ingresos       Ingreso[] // Relación inversa con Ingreso
  egresos        Egreso[]  // Relación inversa con Egreso

  @@index([email])
}

model Session {
  id                Int      @id @default(autoincrement()) // Clave primaria
  employeeNumber    String   @unique // Relación 1 a 1 con el empleado
  password          String
  verificationEmail String   @unique
  startTime         DateTime
  endTime           DateTime?
  verificationToken String   // Token de sesión

  // Relación 1 a 1 con la tabla Employee
  employee Employee @relation(fields: [employeeNumber], references: [employeeNumber])

  @@index([verificationEmail]) // Índice para email
  @@index([verificationToken]) // Índice para token de sesión
}

model Producto {
  id              Int         @id @default(autoincrement())
  name            String
  tipoProductoId  Int
  tipoProducto    TipoProducto @relation(fields: [tipoProductoId], references: [id])
  precioSugerido  Float
  precioTienda    Float
  fechaAñadido    DateTime
  estatusProductoId Int
  estatusProducto EstatusProducto @relation(fields: [estatusProductoId], references: [id])
  estatus         String // Puede ser "nuevo", "usado", "dañado", etc.
  ventas          VentaProducto[]

  @@index([name])
  @@index([fechaAñadido]) // Index en fecha de añadido
  @@index([precioSugerido]) // Index en precio sugerido
}

model TipoProducto {
  id   Int    @id @default(autoincrement())
  name String
  productos Producto[]
}

model EstatusProducto {
  id   Int    @id @default(autoincrement())
  name String
  productos Producto[]
}

model Venta {
  id            Int          @id @default(autoincrement())
  employeeNumber String
  ventas        Json         // Json para artículos vendidos
  pago          Float
  cambio        Float
  tipoPagoId    Int
  tipoPago      TipoPago     @relation(fields: [tipoPagoId], references: [id])
  fecha         DateTime
  descuento     Float?

  employee      Employee     @relation(fields: [employeeNumber], references: [employeeNumber])
  ventaProductos VentaProducto[] // Relación con VentaProducto
}

model TipoPago {
  id    Int    @id @default(autoincrement())
  name  String
  ventas Venta[]
}

model TipoMovimiento {
  id         Int        @id @default(autoincrement())
  name       String
  ingresos   Ingreso[]  // Relación con Ingreso
  egresos    Egreso[]   // Relación con Egreso
}

model Ingreso {
  id               Int          @id @default(autoincrement())
  tipoMovimientoId Int
  tipoMovimiento   TipoMovimiento @relation(fields: [tipoMovimientoId], references: [id]) // Relación con TipoMovimiento
  monto            Float
  fecha            DateTime
  employeeNumber   String

  employee         Employee @relation(fields: [employeeNumber], references: [employeeNumber])
}

model Egreso {
  id               Int          @id @default(autoincrement())
  tipoMovimientoId Int
  tipoMovimiento   TipoMovimiento @relation(fields: [tipoMovimientoId], references: [id]) // Relación con TipoMovimiento
  monto            Float
  fecha            DateTime
  employeeNumber   String

  employee         Employee @relation(fields: [employeeNumber], references: [employeeNumber])
}


model VentaProducto {
  id         Int       @id @default(autoincrement())
  ventaId    Int
  productoId Int

  venta      Venta     @relation(fields: [ventaId], references: [id]) // Relación con Venta
  producto   Producto  @relation(fields: [productoId], references: [id]) // Relación con Producto
}
